// Generated by CoffeeScript 1.7.1
(function() {
  var Package, dirname, extname, fs, handlebars, join, relative, vm, _, _ref,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('underscore');

  fs = require('fs');

  vm = require('vm');

  handlebars = require('handlebars');

  _ref = require('path'), join = _ref.join, dirname = _ref.dirname, relative = _ref.relative, extname = _ref.extname;

  handlebars.registerHelper('json', function(o) {
    return new handlebars.SafeString(JSON.stringify(o));
  });

  handlebars.registerHelper('makeName', function(s) {
    var str;
    str = s.replace('\'', '\\\'').replace('\\', '\\\\');
    return new handlebars.SafeString(str);
  });

  handlebars.registerHelper('transRequire', function(code, map) {
    var requireRegExp, transed;
    requireRegExp = /require\s*\(\s*['"]([^'"\s]+)['"]\s*\)/g;
    transed = code.replace(requireRegExp, function(matched, name) {
      var moduleName, strName;
      moduleName = map[name];
      if (moduleName != null) {
        strName = moduleName.replace('\'', '\\\'').replace('\\', '\\\\');
        return '__modules__[\'' + strName + '\']()';
      } else {
        return matched;
      }
    });
    return transed;
  });

  Package = (function() {
    var cjsRequireRegExp, commentRegExp;

    commentRegExp = /(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/mg;

    cjsRequireRegExp = /[^.]\s*require\s*\(\s*["']([^'"\s]+)["']\s*\)/g;

    function Package(options) {
      this._options = _.extend({}, options);
      this.basePath = this._options.base;
      this.ignore = options.ignore;
      this.files = [];
    }

    Package.prototype.build = function() {
      var template, tpl;
      this.check_and_load();
      this.generateModules();
      tpl = fs.readFileSync(join(__dirname, '..', 'template.hbs'), 'utf-8');
      template = handlebars.compile(tpl);
      return this.output = template({
        modules: this.modules,
        name: this.modules[0].name
      });
    };

    Package.prototype.check_and_load = function() {
      var file;
      file = this._options.input;
      return this.resolve(file);
    };

    Package.prototype.resolve = function(file) {
      var data, dir, script;
      if (!fs.existsSync(file)) {
        throw new Error("" + file + " not exists!");
      }
      data = fs.readFileSync(file, 'utf-8');
      script = this.parse(data, file);
      dir = dirname(file);
      this.files.push(script);
      return script.deps.forEach((function(_this) {
        return function(f) {
          if (__indexOf.call(_this.ignore, f) >= 0) {
            return;
          }
          if (__indexOf.call(_.pluck(_this.files, 'path'), f) >= 0) {
            return;
          }
          return _this.resolve(f);
        };
      })(this));
    };

    Package.prototype.parse = function(data, file) {
      var deps, script;
      script = {
        name: relative(this.basePath, file),
        path: file,
        code: data
      };
      deps = [];
      data.replace(commentRegExp, '').replace(cjsRequireRegExp, function(matched, dep) {
        return deps.push(dep);
      });
      script.originDeps = deps;
      script.depsMap = {};
      script.deps = deps.map((function(_this) {
        return function(dep) {
          var origin;
          origin = dep;
          if (!/^(\.)*\//.test(dep || __indexOf.call(_this.ignore, dep) >= 0)) {
            return dep;
          }
          dep = join(dirname(file), dep);
          if (!extname(dep === '.js')) {
            dep += '.js';
          }
          dep = relative(_this.basePath, dep);
          script.depsMap[origin] = dep;
          return dep;
        };
      })(this));
      return script;
    };

    Package.prototype.generateModules = function() {
      return this.modules = this.files.map((function(_this) {
        return function(file) {
          file.moduleCode = _this.getModuleCode(file);
          return file;
        };
      })(this));
    };

    Package.prototype.getModuleCode = function(file) {
      var context, __func__;
      __func__ = null;
      context = {
        define: function(name, deps, func) {
          if (typeof name !== 'string') {
            func = deps;
            deps = name;
            name = null;
          }
          if (!Array.isArray(deps)) {
            func = deps;
            deps = [];
          }
          return __func__ = func.toString();
        }
      };
      vm.runInNewContext(file.code, context, file.name);
      return __func__;
    };

    return Package;

  })();

  module.exports = Package;

}).call(this);
